"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/scrollbooster";
exports.ids = ["vendor-chunks/scrollbooster"];
exports.modules = {

/***/ "(ssr)/./node_modules/scrollbooster/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/scrollbooster/src/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ScrollBooster)\n/* harmony export */ });\nconst getFullWidth = (elem) => Math.max(elem.offsetWidth, elem.scrollWidth);\nconst getFullHeight = (elem) => Math.max(elem.offsetHeight, elem.scrollHeight);\n\nconst textNodeFromPoint = (element, x, y) => {\n    const nodes = element.childNodes;\n    const range = document.createRange();\n    for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        if (node.nodeType !== 3) {\n            continue;\n        }\n        range.selectNodeContents(node);\n        const rect = range.getBoundingClientRect();\n        if (x >= rect.left && y >= rect.top && x <= rect.right && y <= rect.bottom) {\n            return node;\n        }\n    }\n    return false;\n};\n\nconst clearTextSelection = () => {\n    const selection = window.getSelection ? window.getSelection() : document.selection;\n    if (!selection) {\n        return;\n    }\n    if (selection.removeAllRanges) {\n        selection.removeAllRanges();\n    } else if (selection.empty) {\n        selection.empty();\n    }\n};\n\nconst CLICK_EVENT_THRESHOLD_PX = 5;\n\nclass ScrollBooster {\n    /**\n     * Create ScrollBooster instance\n     * @param {Object} options - options object\n     * @param {Element} options.viewport - container element\n     * @param {Element} options.content - scrollable content element\n     * @param {String} options.direction - scroll direction\n     * @param {String} options.pointerMode - mouse or touch support\n     * @param {String} options.scrollMode - predefined scrolling technique\n     * @param {Boolean} options.bounce - bounce effect\n     * @param {Number} options.bounceForce - bounce effect factor\n     * @param {Number} options.friction - scroll friction factor\n     * @param {Boolean} options.textSelection - enables text selection\n     * @param {Boolean} options.inputsFocus - enables focus on input elements\n     * @param {Boolean} options.emulateScroll - enables mousewheel emulation\n     * @param {Function} options.onClick - click handler\n     * @param {Function} options.onUpdate - state update handler\n     * @param {Function} options.onWheel - wheel handler\n     * @param {Function} options.shouldScroll - predicate to allow or disable scroll\n     */\n    constructor(options = {}) {\n        const defaults = {\n            content: options.viewport.children[0],\n            direction: 'all', // 'vertical', 'horizontal'\n            pointerMode: 'all', // 'touch', 'mouse'\n            scrollMode: undefined, // 'transform', 'native'\n            bounce: true,\n            bounceForce: 0.1,\n            friction: 0.05,\n            textSelection: false,\n            inputsFocus: true,\n            emulateScroll: false,\n            preventDefaultOnEmulateScroll: false, // 'vertical', 'horizontal'\n            preventPointerMoveDefault: true,\n            lockScrollOnDragDirection: false, // 'vertical', 'horizontal', 'all'\n            pointerDownPreventDefault: true,\n            dragDirectionTolerance: 40,\n            onPointerDown() {},\n            onPointerUp() {},\n            onPointerMove() {},\n            onClick() {},\n            onUpdate() {},\n            onWheel() {},\n            shouldScroll() {\n                return true;\n            },\n        };\n\n        this.props = { ...defaults, ...options };\n\n        if (!this.props.viewport || !(this.props.viewport instanceof Element)) {\n            console.error(`ScrollBooster init error: \"viewport\" config property must be present and must be Element`);\n            return;\n        }\n\n        if (!this.props.content) {\n            console.error(`ScrollBooster init error: Viewport does not have any content`);\n            return;\n        }\n\n        this.isDragging = false;\n        this.isTargetScroll = false;\n        this.isScrolling = false;\n        this.isRunning = false;\n\n        const START_COORDINATES = { x: 0, y: 0 };\n\n        this.position = { ...START_COORDINATES };\n        this.velocity = { ...START_COORDINATES };\n        this.dragStartPosition = { ...START_COORDINATES };\n        this.dragOffset = { ...START_COORDINATES };\n        this.clientOffset = { ...START_COORDINATES };\n        this.dragPosition = { ...START_COORDINATES };\n        this.targetPosition = { ...START_COORDINATES };\n        this.scrollOffset = { ...START_COORDINATES };\n\n        this.rafID = null;\n        this.events = {};\n\n        this.updateMetrics();\n        this.handleEvents();\n    }\n\n    /**\n     * Update options object with new given values\n     */\n    updateOptions(options = {}) {\n        this.props = { ...this.props, ...options };\n        this.props.onUpdate(this.getState());\n        this.startAnimationLoop();\n    }\n\n    /**\n     * Update DOM container elements metrics (width and height)\n     */\n    updateMetrics() {\n        this.viewport = {\n            width: this.props.viewport.clientWidth,\n            height: this.props.viewport.clientHeight,\n        };\n        this.content = {\n            width: getFullWidth(this.props.content),\n            height: getFullHeight(this.props.content),\n        };\n        this.edgeX = {\n            from: Math.min(-this.content.width + this.viewport.width, 0),\n            to: 0,\n        };\n        this.edgeY = {\n            from: Math.min(-this.content.height + this.viewport.height, 0),\n            to: 0,\n        };\n\n        this.props.onUpdate(this.getState());\n        this.startAnimationLoop();\n    }\n\n    /**\n     * Run animation loop\n     */\n    startAnimationLoop() {\n        this.isRunning = true;\n        cancelAnimationFrame(this.rafID);\n        this.rafID = requestAnimationFrame(() => this.animate());\n    }\n\n    /**\n     * Main animation loop\n     */\n    animate() {\n        if (!this.isRunning) {\n            return;\n        }\n        this.updateScrollPosition();\n        // stop animation loop if nothing moves\n        if (!this.isMoving()) {\n            this.isRunning = false;\n            this.isTargetScroll = false;\n        }\n        const state = this.getState();\n        this.setContentPosition(state);\n        this.props.onUpdate(state);\n        this.rafID = requestAnimationFrame(() => this.animate());\n    }\n\n    /**\n     * Calculate and set new scroll position\n     */\n    updateScrollPosition() {\n        this.applyEdgeForce();\n        this.applyDragForce();\n        this.applyScrollForce();\n        this.applyTargetForce();\n\n        const inverseFriction = 1 - this.props.friction;\n        this.velocity.x *= inverseFriction;\n        this.velocity.y *= inverseFriction;\n\n        if (this.props.direction !== 'vertical') {\n            this.position.x += this.velocity.x;\n        }\n        if (this.props.direction !== 'horizontal') {\n            this.position.y += this.velocity.y;\n        }\n\n        // disable bounce effect\n        if ((!this.props.bounce || this.isScrolling) && !this.isTargetScroll) {\n            this.position.x = Math.max(Math.min(this.position.x, this.edgeX.to), this.edgeX.from);\n            this.position.y = Math.max(Math.min(this.position.y, this.edgeY.to), this.edgeY.from);\n        }\n    }\n\n    /**\n     * Increase general scroll velocity by given force amount\n     */\n    applyForce(force) {\n        this.velocity.x += force.x;\n        this.velocity.y += force.y;\n    }\n\n    /**\n     * Apply force for bounce effect\n     */\n    applyEdgeForce() {\n        if (!this.props.bounce || this.isDragging) {\n            return;\n        }\n\n        // scrolled past viewport edges\n        const beyondXFrom = this.position.x < this.edgeX.from;\n        const beyondXTo = this.position.x > this.edgeX.to;\n        const beyondYFrom = this.position.y < this.edgeY.from;\n        const beyondYTo = this.position.y > this.edgeY.to;\n        const beyondX = beyondXFrom || beyondXTo;\n        const beyondY = beyondYFrom || beyondYTo;\n\n        if (!beyondX && !beyondY) {\n            return;\n        }\n\n        const edge = {\n            x: beyondXFrom ? this.edgeX.from : this.edgeX.to,\n            y: beyondYFrom ? this.edgeY.from : this.edgeY.to,\n        };\n\n        const distanceToEdge = {\n            x: edge.x - this.position.x,\n            y: edge.y - this.position.y,\n        };\n\n        const force = {\n            x: distanceToEdge.x * this.props.bounceForce,\n            y: distanceToEdge.y * this.props.bounceForce,\n        };\n\n        const restPosition = {\n            x: this.position.x + (this.velocity.x + force.x) / this.props.friction,\n            y: this.position.y + (this.velocity.y + force.y) / this.props.friction,\n        };\n\n        if ((beyondXFrom && restPosition.x >= this.edgeX.from) || (beyondXTo && restPosition.x <= this.edgeX.to)) {\n            force.x = distanceToEdge.x * this.props.bounceForce - this.velocity.x;\n        }\n\n        if ((beyondYFrom && restPosition.y >= this.edgeY.from) || (beyondYTo && restPosition.y <= this.edgeY.to)) {\n            force.y = distanceToEdge.y * this.props.bounceForce - this.velocity.y;\n        }\n\n        this.applyForce({\n            x: beyondX ? force.x : 0,\n            y: beyondY ? force.y : 0,\n        });\n    }\n\n    /**\n     * Apply force to move content while dragging with mouse/touch\n     */\n    applyDragForce() {\n        if (!this.isDragging) {\n            return;\n        }\n\n        const dragVelocity = {\n            x: this.dragPosition.x - this.position.x,\n            y: this.dragPosition.y - this.position.y,\n        };\n\n        this.applyForce({\n            x: dragVelocity.x - this.velocity.x,\n            y: dragVelocity.y - this.velocity.y,\n        });\n    }\n\n    /**\n     * Apply force to emulate mouse wheel or trackpad\n     */\n    applyScrollForce() {\n        if (!this.isScrolling) {\n            return;\n        }\n\n        this.applyForce({\n            x: this.scrollOffset.x - this.velocity.x,\n            y: this.scrollOffset.y - this.velocity.y,\n        });\n\n        this.scrollOffset.x = 0;\n        this.scrollOffset.y = 0;\n    }\n\n    /**\n     * Apply force to scroll to given target coordinate\n     */\n    applyTargetForce() {\n        if (!this.isTargetScroll) {\n            return;\n        }\n\n        this.applyForce({\n            x: (this.targetPosition.x - this.position.x) * 0.08 - this.velocity.x,\n            y: (this.targetPosition.y - this.position.y) * 0.08 - this.velocity.y,\n        });\n    }\n\n    /**\n     * Check if scrolling happening\n     */\n    isMoving() {\n        return (\n            this.isDragging ||\n            this.isScrolling ||\n            Math.abs(this.velocity.x) >= 0.01 ||\n            Math.abs(this.velocity.y) >= 0.01\n        );\n    }\n\n    /**\n     * Set scroll target coordinate for smooth scroll\n     */\n    scrollTo(position = {}) {\n        this.isTargetScroll = true;\n        this.targetPosition.x = -position.x || 0;\n        this.targetPosition.y = -position.y || 0;\n        this.startAnimationLoop();\n    }\n\n    /**\n     * Manual position setting\n     */\n    setPosition(position = {}) {\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.position.x = -position.x || 0;\n        this.position.y = -position.y || 0;\n        this.startAnimationLoop();\n    }\n\n    /**\n     * Get latest metrics and coordinates\n     */\n    getState() {\n        return {\n            isMoving: this.isMoving(),\n            isDragging: !!(this.dragOffset.x || this.dragOffset.y),\n            position: { x: -this.position.x, y: -this.position.y },\n            dragOffset: this.dragOffset,\n            dragAngle: this.getDragAngle(this.clientOffset.x, this.clientOffset.y),\n            borderCollision: {\n                left: this.position.x >= this.edgeX.to,\n                right: this.position.x <= this.edgeX.from,\n                top: this.position.y >= this.edgeY.to,\n                bottom: this.position.y <= this.edgeY.from,\n            },\n        };\n    }\n\n    /**\n     * Get drag angle (up: 180, left: -90, right: 90, down: 0)\n     */\n    getDragAngle(x, y) {\n        return Math.round(Math.atan2(x, y) * (180 / Math.PI));\n    }\n\n    /**\n     * Get drag direction (horizontal or vertical)\n     */\n    getDragDirection(angle, tolerance) {\n        const absAngle = Math.abs(90 - Math.abs(angle));\n\n        if (absAngle <= 90 - tolerance) {\n            return 'horizontal';\n        } else {\n            return 'vertical';\n        }\n    }\n\n    /**\n     * Update DOM container elements metrics (width and height)\n     */\n    setContentPosition(state) {\n        if (this.props.scrollMode === 'transform') {\n            this.props.content.style.transform = `translate(${-state.position.x}px, ${-state.position.y}px)`;\n        }\n        if (this.props.scrollMode === 'native') {\n            this.props.viewport.scrollTop = state.position.y;\n            this.props.viewport.scrollLeft = state.position.x;\n        }\n    }\n\n    /**\n     * Register all DOM events\n     */\n    handleEvents() {\n        const dragOrigin = { x: 0, y: 0 };\n        const clientOrigin = { x: 0, y: 0 };\n        let dragDirection = null;\n        let wheelTimer = null;\n        let isTouch = false;\n\n        const setDragPosition = (event) => {\n            if (!this.isDragging) {\n                return;\n            }\n\n            const eventData = isTouch ? event.touches[0] : event;\n            const { pageX, pageY, clientX, clientY } = eventData;\n\n            this.dragOffset.x = pageX - dragOrigin.x;\n            this.dragOffset.y = pageY - dragOrigin.y;\n\n            this.clientOffset.x = clientX - clientOrigin.x;\n            this.clientOffset.y = clientY - clientOrigin.y;\n\n            // get dragDirection if offset threshold is reached\n            if (\n                (Math.abs(this.clientOffset.x) > 5 && !dragDirection) ||\n                (Math.abs(this.clientOffset.y) > 5 && !dragDirection)\n            ) {\n                dragDirection = this.getDragDirection(\n                    this.getDragAngle(this.clientOffset.x, this.clientOffset.y),\n                    this.props.dragDirectionTolerance\n                );\n            }\n\n            // prevent scroll if not expected scroll direction\n            if (this.props.lockScrollOnDragDirection && this.props.lockScrollOnDragDirection !== 'all') {\n                if (dragDirection === this.props.lockScrollOnDragDirection && isTouch) {\n                    this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n                    this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n                } else if (!isTouch) {\n                    this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n                    this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n                } else {\n                    this.dragPosition.x = this.dragStartPosition.x;\n                    this.dragPosition.y = this.dragStartPosition.y;\n                }\n            } else {\n                this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n                this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n            }\n        };\n\n        this.events.pointerdown = (event) => {\n            isTouch = !!(event.touches && event.touches[0]);\n\n            this.props.onPointerDown(this.getState(), event, isTouch);\n\n            const eventData = isTouch ? event.touches[0] : event;\n            const { pageX, pageY, clientX, clientY } = eventData;\n\n            const { viewport } = this.props;\n            const rect = viewport.getBoundingClientRect();\n\n            // click on vertical scrollbar\n            if (clientX - rect.left >= viewport.clientLeft + viewport.clientWidth) {\n                return;\n            }\n\n            // click on horizontal scrollbar\n            if (clientY - rect.top >= viewport.clientTop + viewport.clientHeight) {\n                return;\n            }\n\n            // interaction disabled by user\n            if (!this.props.shouldScroll(this.getState(), event)) {\n                return;\n            }\n\n            // disable right mouse button scroll\n            if (event.button === 2) {\n                return;\n            }\n\n            // disable on mobile\n            if (this.props.pointerMode === 'mouse' && isTouch) {\n                return;\n            }\n\n            // disable on desktop\n            if (this.props.pointerMode === 'touch' && !isTouch) {\n                return;\n            }\n\n            // focus on form input elements\n            const formNodes = ['input', 'textarea', 'button', 'select', 'label'];\n            if (this.props.inputsFocus && formNodes.indexOf(event.target.nodeName.toLowerCase()) > -1) {\n                return;\n            }\n\n            // handle text selection\n            if (this.props.textSelection) {\n                const textNode = textNodeFromPoint(event.target, clientX, clientY);\n                if (textNode) {\n                    return;\n                }\n                clearTextSelection();\n            }\n\n            this.isDragging = true;\n\n            dragOrigin.x = pageX;\n            dragOrigin.y = pageY;\n\n            clientOrigin.x = clientX;\n            clientOrigin.y = clientY;\n\n            this.dragStartPosition.x = this.position.x;\n            this.dragStartPosition.y = this.position.y;\n\n            setDragPosition(event);\n            this.startAnimationLoop();\n\n            if (!isTouch && this.props.pointerDownPreventDefault) {\n                event.preventDefault();\n            }\n        };\n\n        this.events.pointermove = (event) => {\n            // prevent default scroll if scroll direction is locked\n            if (event.cancelable && (this.props.lockScrollOnDragDirection === 'all' ||\n                this.props.lockScrollOnDragDirection === dragDirection)) {\n                event.preventDefault();\n            }\n            setDragPosition(event);\n            this.props.onPointerMove(this.getState(), event, isTouch);\n        };\n\n        this.events.pointerup = (event) => {\n            this.isDragging = false;\n            dragDirection = null;\n            this.props.onPointerUp(this.getState(), event, isTouch);\n        };\n\n        this.events.wheel = (event) => {\n            const state = this.getState();\n            if (!this.props.emulateScroll) {\n                return;\n            }\n            this.velocity.x = 0;\n            this.velocity.y = 0;\n            this.isScrolling = true;\n\n            this.scrollOffset.x = -event.deltaX;\n            this.scrollOffset.y = -event.deltaY;\n\n            this.props.onWheel(state, event);\n\n            this.startAnimationLoop();\n\n            clearTimeout(wheelTimer);\n            wheelTimer = setTimeout(() => (this.isScrolling = false), 80);\n\n            // get (trackpad) scrollDirection and prevent default events\n            if (\n                this.props.preventDefaultOnEmulateScroll &&\n                this.getDragDirection(\n                    this.getDragAngle(-event.deltaX, -event.deltaY),\n                    this.props.dragDirectionTolerance\n                ) === this.props.preventDefaultOnEmulateScroll\n            ) {\n                event.preventDefault();\n            }\n        };\n\n        this.events.scroll = () => {\n            const { scrollLeft, scrollTop } = this.props.viewport;\n            if (Math.abs(this.position.x + scrollLeft) > 3) {\n                this.position.x = -scrollLeft;\n                this.velocity.x = 0;\n            }\n            if (Math.abs(this.position.y + scrollTop) > 3) {\n                this.position.y = -scrollTop;\n                this.velocity.y = 0;\n            }\n        };\n\n        this.events.click = (event) => {\n            const state = this.getState();\n            const dragOffsetX = this.props.direction !== 'vertical' ? state.dragOffset.x : 0;\n            const dragOffsetY = this.props.direction !== 'horizontal' ? state.dragOffset.y : 0;\n            if (Math.max(Math.abs(dragOffsetX), Math.abs(dragOffsetY)) > CLICK_EVENT_THRESHOLD_PX) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            this.props.onClick(state, event, isTouch);\n        };\n\n        this.events.contentLoad = () => this.updateMetrics();\n        this.events.resize = () => this.updateMetrics();\n\n        this.props.viewport.addEventListener('mousedown', this.events.pointerdown);\n        this.props.viewport.addEventListener('touchstart', this.events.pointerdown, { passive: false });\n        this.props.viewport.addEventListener('click', this.events.click);\n        this.props.viewport.addEventListener('wheel', this.events.wheel, { passive: false });\n        this.props.viewport.addEventListener('scroll', this.events.scroll);\n        this.props.content.addEventListener('load', this.events.contentLoad, true);\n        window.addEventListener('mousemove', this.events.pointermove);\n        window.addEventListener('touchmove', this.events.pointermove, { passive: false });\n        window.addEventListener('mouseup', this.events.pointerup);\n        window.addEventListener('touchend', this.events.pointerup);\n        window.addEventListener('resize', this.events.resize);\n    }\n\n    /**\n     * Unregister all DOM events\n     */\n    destroy() {\n        this.props.viewport.removeEventListener('mousedown', this.events.pointerdown);\n        this.props.viewport.removeEventListener('touchstart', this.events.pointerdown);\n        this.props.viewport.removeEventListener('click', this.events.click);\n        this.props.viewport.removeEventListener('wheel', this.events.wheel);\n        this.props.viewport.removeEventListener('scroll', this.events.scroll);\n        this.props.content.removeEventListener('load', this.events.contentLoad);\n        window.removeEventListener('mousemove', this.events.pointermove);\n        window.removeEventListener('touchmove', this.events.pointermove);\n        window.removeEventListener('mouseup', this.events.pointerup);\n        window.removeEventListener('touchend', this.events.pointerup);\n        window.removeEventListener('resize', this.events.resize);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scrollbooster/src/index.js\n");

/***/ })

};
;